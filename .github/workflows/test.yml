# This is the main CI workflow that runs the test suite on all pushes to main and all pull requests.
# It runs the following jobs:
# - required: runs the test suite on ubuntu with stable and beta rust toolchains
# - minimal: runs the test suite with the minimal versions of the dependencies that satisfy the
#   requirements of this crate, and its dependencies
# - os-check: runs the test suite on mac and windows
# - coverage: runs the test suite and collects coverage information
# See check.yml for information about how the concurrency cancellation and workflow triggering works
permissions:
  contents: read
on:
  push:
    branches: [main]
  pull_request:
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: test
jobs:
  required:
    runs-on: ubuntu-latest
    name: ubuntu / nightly
    env:
      OMPI_MCA_rmaps_base_oversubscribe: true
    steps:
      - name: Install system requirements
        run: sudo apt-get install -y libhdf5-dev openmpi-bin libopenmpi-dev libboost-program-options-dev
      - name: Install python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # tag=v5.6.0
        with:
          python-version: '3.12'
      - name: Install python dependencies
        run: pip install cotengra kahypar optuna
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # branch=master
        with:
          toolchain: nightly
      - name: cargo generate-lockfile
        # enable this ci template to run regardless of whether the lockfile is checked in or not
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      # https://twitter.com/jonhoo/status/1571290371124260865
      - name: cargo test --locked
        run: cargo test --locked --all-features --all-targets
      # https://github.com/rust-lang/cargo/issues/6669
      - name: cargo test --doc
        run: cargo test --locked --all-features --doc
  minimal:
    # This action chooses the oldest version of the dependencies permitted by Cargo.toml to ensure
    # that this crate is compatible with the minimal version that this crate and its dependencies
    # require. This will pickup issues where this create relies on functionality that was introduced
    # later than the actual version specified (e.g., when we choose just a major version, but a
    # method was added after this version).
    #
    # This particular check can be difficult to get to succeed as often transitive dependencies may
    # be incorrectly specified (e.g., a dependency specifies 1.0 but really requires 1.1.5). There
    # is an alternative flag available -Zdirect-minimal-versions that uses the minimal versions for
    # direct dependencies of this crate, while selecting the maximal versions for the transitive
    # dependencies. Alternatively, you can add a line in your Cargo.toml to artificially increase
    # the minimal dependency, which you do with e.g.:
    # ```toml
    # # for minimal-versions
    # [target.'cfg(any())'.dependencies]
    # openssl = { version = "0.10.55", optional = true } # needed to allow foo to build with -Zminimal-versions
    # ```
    # The optional = true is necessary in case that dependency isn't otherwise transitively required
    # by your library, and the target bit is so that this dependency edge never actually affects
    # Cargo build order. See also
    # https://github.com/jonhoo/fantoccini/blob/fde336472b712bc7ebf5b4e772023a7ba71b2262/Cargo.toml#L47-L49.
    # This action is run on ubuntu with the stable toolchain, as it is not expected to fail
    runs-on: ubuntu-latest
    name: ubuntu / nightly / minimal-versions
    env:
      OMPI_MCA_rmaps_base_oversubscribe: true
    steps:
      - name: Install system requirements
        run: sudo apt-get install -y libhdf5-dev openmpi-bin libopenmpi-dev libboost-program-options-dev
      - name: Install python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # tag=v5.6.0
        with:
          python-version: '3.12'
      - name: Install python dependencies
        run: pip install cotengra kahypar optuna
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # branch=master
        with:
          toolchain: nightly
      - name: cargo update -Zdirect-minimal-versions
        run: cargo +nightly update -Zdirect-minimal-versions
      - name: cargo test
        run: cargo test --locked --all-features --all-targets
  # os-check:
  #   # run cargo test on mac and windows
  #   runs-on: ${{ matrix.os }}
  #   name: ${{ matrix.os }} / stable
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [macos-latest, windows-latest]
  #   steps:
  #     # if your project needs OpenSSL, uncomment this to fix Windows builds.
  #     # it's commented out by default as the install command takes 5-10m.
  #     # - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
  #     #   if: runner.os == 'Windows'
  #     # - run: vcpkg install openssl:x64-windows-static-md
  #     #   if: runner.os == 'Windows'
  #     - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
  #       with:
  #         submodules: true
  #     - name: Install stable
  #       uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # branch=master
  #       with:
  #         toolchain: stable
  #     - name: cargo generate-lockfile
  #       if: hashFiles('Cargo.lock') == ''
  #       run: cargo generate-lockfile
  #     - name: cargo test
  #       run: cargo test --locked --all-features --all-targets
  coverage:
    # use llvm-cov to build and collect coverage and outputs in a format that
    # is compatible with https://github.com/marketplace/actions/code-coverage-summary.
    runs-on: ubuntu-latest
    name: ubuntu / nightly / coverage
    env:
      OMPI_MCA_rmaps_base_oversubscribe: true
    steps:
      - name: Install system requirements
        run: sudo apt-get install -y libhdf5-dev openmpi-bin libopenmpi-dev libboost-program-options-dev
      - name: Install python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # tag=v5.6.0
        with:
          python-version: '3.12'
      - name: Install python dependencies
        run: pip install cotengra kahypar optuna
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install nightly
        uses: dtolnay/rust-toolchain@b3b07ba8b418998c39fb20f53e8b695cdcc8de1b # branch=master
        with:
          toolchain: nightly
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@5140f853a1cdf11adb558a08d00d06d67af3dea4 # tag=v2.58.11
        with:
          tool: cargo-llvm-cov
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo llvm-cov
        run: cargo llvm-cov --locked --all-features --workspace --lcov --output-path coverage.lcov
      - name: Check 80% test coverage
        uses: tluijken/code-coverage-threshold@905bb53afdaea38a54d1a7a19c75c1ff513a3b07 # tag=v1
        with:
          coverage-file: coverage.lcov
          minimum-coverage: 80