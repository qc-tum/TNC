# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  push:
    branches: [main]
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:
  fmt:
    runs-on: ubuntu-latest
    name: fmt (stable)
    steps:
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install stable
        uses: actions-rust-lang/setup-rust-toolchain@ac90e63697ac2784f4ecfe2964e1a285c304003a # tag=v1.14.1
        with:
          toolchain: stable
          components: rustfmt
      - name: cargo fmt --check
        run: cargo fmt --check
  clippy:
    runs-on: ubuntu-latest
    name: clippy (nightly)
    steps:
      - uses: awalsh128/cache-apt-pkgs-action@2c09a5e66da6c8016428a2172bd76e5e4f14bb17 # tag=v1.5.3
        with:
          packages: libhdf5-dev openmpi-bin libopenmpi-dev libboost-program-options-dev
          version: 1.0
          execute_install_scripts: true
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install nightly
        uses: actions-rust-lang/setup-rust-toolchain@ac90e63697ac2784f4ecfe2964e1a285c304003a # tag=v1.14.1
        with:
          toolchain: nightly
          components: clippy
      - name: cargo clippy
        run: cargo clippy --all-features --all-targets
  # semver:
  #   runs-on: ubuntu-latest
  #   name: semver
  #   steps:
  #     - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
  #       with:
  #         submodules: true
  #     - name: Install stable
  #       uses: actions-rust-lang/setup-rust-toolchain@ac90e63697ac2784f4ecfe2964e1a285c304003a # tag=v1.14.1
  #       with:
  #         toolchain: stable
  #         components: rustfmt
  #     - name: cargo-semver-checks
  #       uses: obi1kenobi/cargo-semver-checks-action@5b298c9520f7096a4683c0bd981a7ac5a7e249ae # tag=v2.8
  doc:
    # run docs generation on nightly rather than stable. This enables features like
    # https://doc.rust-lang.org/beta/unstable-book/language-features/doc-cfg.html which allows an
    # API be documented as only available in some specific platforms.
    runs-on: ubuntu-latest
    name: doc (nightly)
    steps:
      - uses: awalsh128/cache-apt-pkgs-action@2c09a5e66da6c8016428a2172bd76e5e4f14bb17 # tag=v1.5.3
        with:
          packages: libhdf5-dev openmpi-bin libopenmpi-dev libboost-program-options-dev
          version: 1.0
          execute_install_scripts: true
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install nightly
        uses: actions-rust-lang/setup-rust-toolchain@ac90e63697ac2784f4ecfe2964e1a285c304003a # tag=v1.14.1
        with:
          toolchain: nightly
      - name: Install cargo-docs-rs
        uses: dtolnay/install@982daea0f5d846abc3c83e01a6a1d73c040047c1 # branch=cargo-docs-rs
      - name: cargo docs-rs
        run: cargo docs-rs
  hack:
    # cargo-hack checks combinations of feature flags to ensure that features are all additive
    # which is required for feature unification
    runs-on: ubuntu-latest
    name: features (nightly)
    steps:
      - uses: awalsh128/cache-apt-pkgs-action@2c09a5e66da6c8016428a2172bd76e5e4f14bb17 # tag=v1.5.3
        with:
          packages: libhdf5-dev openmpi-bin libopenmpi-dev libboost-program-options-dev
          version: 1.0
          execute_install_scripts: true
      - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
        with:
          submodules: true
      - name: Install nightly
        uses: actions-rust-lang/setup-rust-toolchain@ac90e63697ac2784f4ecfe2964e1a285c304003a # tag=v1.14.1
        with:
          toolchain: nightly
      - name: cargo install cargo-hack
        uses: taiki-e/install-action@c0dee14250395ae6b1754a99f67c1d693138b102 # tag=v2.58.30
        with:
          tool: cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      # --feature-powerset runs for every combination of features
      - name: cargo hack
        run: cargo hack --feature-powerset check
  # msrv:
  #   # check that we can build using the minimal rust version that is specified by this crate
  #   runs-on: ubuntu-latest
  #   # we use a matrix here just because env can't be used in job names
  #   # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
  #   strategy:
  #     matrix:
  #       msrv: ["1.56.1"] # 2021 edition requires 1.56
  #   name: msrv (${{ matrix.msrv }})
  #   steps:
  #     - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # tag=v5.0.0
  #       with:
  #         submodules: true
  #     - name: Install ${{ matrix.msrv }}
  #       uses: actions-rust-lang/setup-rust-toolchain@ac90e63697ac2784f4ecfe2964e1a285c304003a # tag=v1.14.1
  #       with:
  #         toolchain: ${{ matrix.msrv }}
  #     - name: cargo +${{ matrix.msrv }} check
  #       run: cargo check