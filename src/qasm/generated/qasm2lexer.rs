// Generated from Qasm2Lexer.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
#![allow(clippy::all, clippy::restriction, clippy::pedantic, clippy::nursery)]
use antlr_rust::atn::ATN;
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::char_stream::CharStream;
use antlr_rust::dfa::DFA;
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::lexer_atn_simulator::{ILexerATNSimulator, LexerATNSimulator};
use antlr_rust::parser_rule_context::{cast, BaseParserRuleContext, ParserRuleContext};
use antlr_rust::recognizer::{Actions, Recognizer};
use antlr_rust::rule_context::{BaseRuleContext, EmptyContext, EmptyCustomRuleContext};
use antlr_rust::token::*;
use antlr_rust::token_factory::{CommonTokenFactory, TokenAware, TokenFactory};
use antlr_rust::vocabulary::{Vocabulary, VocabularyImpl};
use antlr_rust::PredictionContextCache;
use antlr_rust::TokenSource;

use antlr_rust::{lazy_static, Tid, TidAble, TidExt};

use std::cell::RefCell;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};
use std::rc::Rc;
use std::sync::Arc;

pub const OPENQASM: isize = 1;
pub const INCLUDE: isize = 2;
pub const QREG: isize = 3;
pub const CREG: isize = 4;
pub const GATE: isize = 5;
pub const OPAQUE: isize = 6;
pub const RESET: isize = 7;
pub const MEASURE: isize = 8;
pub const BARRIER: isize = 9;
pub const IF: isize = 10;
pub const PI: isize = 11;
pub const U: isize = 12;
pub const CX: isize = 13;
pub const LBRACKET: isize = 14;
pub const RBRACKET: isize = 15;
pub const LBRACE: isize = 16;
pub const RBRACE: isize = 17;
pub const LPAREN: isize = 18;
pub const RPAREN: isize = 19;
pub const SEMICOLON: isize = 20;
pub const COMMA: isize = 21;
pub const DOT: isize = 22;
pub const ARROW: isize = 23;
pub const EQUALS: isize = 24;
pub const PLUS: isize = 25;
pub const MINUS: isize = 26;
pub const ASTERISK: isize = 27;
pub const SLASH: isize = 28;
pub const CARET: isize = 29;
pub const SIN: isize = 30;
pub const COS: isize = 31;
pub const TAN: isize = 32;
pub const EXP: isize = 33;
pub const LN: isize = 34;
pub const SQRT: isize = 35;
pub const Integer: isize = 36;
pub const Float: isize = 37;
pub const StringLiteral: isize = 38;
pub const Whitespace: isize = 39;
pub const Newline: isize = 40;
pub const LineComment: isize = 41;
pub const BlockComment: isize = 42;
pub const Identifier: isize = 43;
pub const VERSION_IDENTIFER_WHITESPACE: isize = 44;
pub const VersionSpecifier: isize = 45;
pub const VERSION_IDENTIFIER: usize = 1;
pub const channelNames: [&'static str; 0 + 2] = ["DEFAULT_TOKEN_CHANNEL", "HIDDEN"];

pub const modeNames: [&'static str; 2] = ["DEFAULT_MODE", "VERSION_IDENTIFIER"];

pub const ruleNames: [&'static str; 46] = [
    "OPENQASM",
    "INCLUDE",
    "QREG",
    "CREG",
    "GATE",
    "OPAQUE",
    "RESET",
    "MEASURE",
    "BARRIER",
    "IF",
    "PI",
    "U",
    "CX",
    "LBRACKET",
    "RBRACKET",
    "LBRACE",
    "RBRACE",
    "LPAREN",
    "RPAREN",
    "SEMICOLON",
    "COMMA",
    "DOT",
    "ARROW",
    "EQUALS",
    "PLUS",
    "MINUS",
    "ASTERISK",
    "SLASH",
    "CARET",
    "SIN",
    "COS",
    "TAN",
    "EXP",
    "LN",
    "SQRT",
    "Integer",
    "FloatLiteralExponent",
    "Float",
    "StringLiteral",
    "Whitespace",
    "Newline",
    "LineComment",
    "BlockComment",
    "Identifier",
    "VERSION_IDENTIFER_WHITESPACE",
    "VersionSpecifier",
];

pub const _LITERAL_NAMES: [Option<&'static str>; 36] = [
    None,
    Some("'OPENQASM'"),
    Some("'include'"),
    Some("'qreg'"),
    Some("'creg'"),
    Some("'gate'"),
    Some("'opaque'"),
    Some("'reset'"),
    Some("'measure'"),
    Some("'barrier'"),
    Some("'if'"),
    Some("'pi'"),
    Some("'U'"),
    Some("'CX'"),
    Some("'['"),
    Some("']'"),
    Some("'{'"),
    Some("'}'"),
    Some("'('"),
    Some("')'"),
    Some("';'"),
    Some("','"),
    Some("'.'"),
    Some("'->'"),
    Some("'=='"),
    Some("'+'"),
    Some("'-'"),
    Some("'*'"),
    Some("'/'"),
    Some("'^'"),
    Some("'sin'"),
    Some("'cos'"),
    Some("'tan'"),
    Some("'exp'"),
    Some("'ln'"),
    Some("'sqrt'"),
];
pub const _SYMBOLIC_NAMES: [Option<&'static str>; 46] = [
    None,
    Some("OPENQASM"),
    Some("INCLUDE"),
    Some("QREG"),
    Some("CREG"),
    Some("GATE"),
    Some("OPAQUE"),
    Some("RESET"),
    Some("MEASURE"),
    Some("BARRIER"),
    Some("IF"),
    Some("PI"),
    Some("U"),
    Some("CX"),
    Some("LBRACKET"),
    Some("RBRACKET"),
    Some("LBRACE"),
    Some("RBRACE"),
    Some("LPAREN"),
    Some("RPAREN"),
    Some("SEMICOLON"),
    Some("COMMA"),
    Some("DOT"),
    Some("ARROW"),
    Some("EQUALS"),
    Some("PLUS"),
    Some("MINUS"),
    Some("ASTERISK"),
    Some("SLASH"),
    Some("CARET"),
    Some("SIN"),
    Some("COS"),
    Some("TAN"),
    Some("EXP"),
    Some("LN"),
    Some("SQRT"),
    Some("Integer"),
    Some("Float"),
    Some("StringLiteral"),
    Some("Whitespace"),
    Some("Newline"),
    Some("LineComment"),
    Some("BlockComment"),
    Some("Identifier"),
    Some("VERSION_IDENTIFER_WHITESPACE"),
    Some("VersionSpecifier"),
];
lazy_static! {
    static ref _shared_context_cache: Arc<PredictionContextCache> =
        Arc::new(PredictionContextCache::new());
    static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(
        _LITERAL_NAMES.iter(),
        _SYMBOLIC_NAMES.iter(),
        None
    ));
}

pub type LexerContext<'input> =
    BaseRuleContext<'input, EmptyCustomRuleContext<'input, LocalTokenFactory<'input>>>;
pub type LocalTokenFactory<'input> = CommonTokenFactory;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a>>::From;

pub struct Qasm2Lexer<'input, Input: CharStream<From<'input>>> {
    base: BaseLexer<'input, Qasm2LexerActions, Input, LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for Qasm2Lexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input: CharStream<From<'input>>> Deref for Qasm2Lexer<'input, Input> {
    type Target = BaseLexer<'input, Qasm2LexerActions, Input, LocalTokenFactory<'input>>;

    fn deref(&self) -> &Self::Target {
        &self.base
    }
}

impl<'input, Input: CharStream<From<'input>>> DerefMut for Qasm2Lexer<'input, Input> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.base
    }
}

impl<'input, Input: CharStream<From<'input>>> Qasm2Lexer<'input, Input> {
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "Qasm2Lexer.g4"
    }

    pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
        antlr_rust::recognizer::check_version("0", "3");
        Self {
            base: BaseLexer::new_base_lexer(
                input,
                LexerATNSimulator::new_lexer_atnsimulator(
                    _ATN.clone(),
                    _decision_to_DFA.clone(),
                    _shared_context_cache.clone(),
                ),
                Qasm2LexerActions {},
                tf,
            ),
        }
    }
}

impl<'input, Input: CharStream<From<'input>>> Qasm2Lexer<'input, Input>
where
    &'input LocalTokenFactory<'input>: Default,
{
    pub fn new(input: Input) -> Self {
        Qasm2Lexer::new_with_token_factory(
            input,
            <&LocalTokenFactory<'input> as Default>::default(),
        )
    }
}

pub struct Qasm2LexerActions {}

impl Qasm2LexerActions {}

impl<'input, Input: CharStream<From<'input>>>
    Actions<'input, BaseLexer<'input, Qasm2LexerActions, Input, LocalTokenFactory<'input>>>
    for Qasm2LexerActions
{
}

impl<'input, Input: CharStream<From<'input>>> Qasm2Lexer<'input, Input> {}

impl<'input, Input: CharStream<From<'input>>>
    LexerRecog<'input, BaseLexer<'input, Qasm2LexerActions, Input, LocalTokenFactory<'input>>>
    for Qasm2LexerActions
{
}
impl<'input> TokenAware<'input> for Qasm2LexerActions {
    type TF = LocalTokenFactory<'input>;
}

impl<'input, Input: CharStream<From<'input>>> TokenSource<'input> for Qasm2Lexer<'input, Input> {
    type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

    fn get_source_name(&self) -> String {
        self.base.get_source_name()
    }

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}

lazy_static! {
    static ref _ATN: Arc<ATN> =
        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
        let mut dfa = Vec::new();
        let size = _ATN.decision_to_state.len();
        for i in 0..size {
            dfa.push(DFA::new(_ATN.clone(), _ATN.get_decision_state(i), i as isize).into())
        }
        Arc::new(dfa)
    };
}

const _serializedATN: &'static str =
    "\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x2f\u{15a}\x08\x01\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\
		\x04\x04\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\
		\x09\x09\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\
		\x0d\x04\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\
		\x12\x09\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\
		\x16\x04\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\
		\x1b\x09\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\
		\x1f\x04\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\
		\x24\x09\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\
		\x28\x04\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\
		\x2d\x09\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x03\x02\x03\x02\x03\x02\x03\
		\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\
		\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x03\x04\x03\x04\x03\
		\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\
		\x06\x03\x06\x03\x06\x03\x06\x03\x07\x03\x07\x03\x07\x03\x07\x03\x07\x03\
		\x07\x03\x07\x03\x08\x03\x08\x03\x08\x03\x08\x03\x08\x03\x08\x03\x09\x03\
		\x09\x03\x09\x03\x09\x03\x09\x03\x09\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\
		\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0a\x03\x0b\x03\x0b\x03\x0b\x03\
		\x0c\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0e\x03\x0f\x03\
		\x0f\x03\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\
		\x14\x03\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\
		\x18\x03\x18\x03\x19\x03\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\
		\x1c\x03\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x1f\x03\
		\x1f\x03\x20\x03\x20\x03\x20\x03\x20\x03\x21\x03\x21\x03\x21\x03\x21\x03\
		\x22\x03\x22\x03\x22\x03\x22\x03\x23\x03\x23\x03\x23\x03\x24\x03\x24\x03\
		\x24\x03\x24\x03\x24\x03\x25\x03\x25\x03\x25\x07\x25\u{e8}\x0a\x25\x0c\
		\x25\x0e\x25\u{eb}\x0b\x25\x05\x25\u{ed}\x0a\x25\x03\x26\x03\x26\x03\x26\
		\x05\x26\u{f2}\x0a\x26\x03\x26\x03\x26\x03\x27\x03\x27\x03\x27\x03\x27\
		\x03\x27\x06\x27\u{fb}\x0a\x27\x0d\x27\x0e\x27\u{fc}\x03\x27\x05\x27\u{100}\
		\x0a\x27\x03\x27\x03\x27\x03\x27\x07\x27\u{105}\x0a\x27\x0c\x27\x0e\x27\
		\u{108}\x0b\x27\x03\x27\x05\x27\u{10b}\x0a\x27\x05\x27\u{10d}\x0a\x27\x03\
		\x28\x03\x28\x06\x28\u{111}\x0a\x28\x0d\x28\x0e\x28\u{112}\x03\x28\x03\
		\x28\x03\x29\x06\x29\u{118}\x0a\x29\x0d\x29\x0e\x29\u{119}\x03\x29\x03\
		\x29\x03\x2a\x06\x2a\u{11f}\x0a\x2a\x0d\x2a\x0e\x2a\u{120}\x03\x2a\x03\
		\x2a\x03\x2b\x03\x2b\x03\x2b\x03\x2b\x07\x2b\u{129}\x0a\x2b\x0c\x2b\x0e\
		\x2b\u{12c}\x0b\x2b\x03\x2b\x03\x2b\x03\x2c\x03\x2c\x03\x2c\x03\x2c\x07\
		\x2c\u{134}\x0a\x2c\x0c\x2c\x0e\x2c\u{137}\x0b\x2c\x03\x2c\x03\x2c\x03\
		\x2c\x03\x2c\x03\x2c\x03\x2d\x03\x2d\x07\x2d\u{140}\x0a\x2d\x0c\x2d\x0e\
		\x2d\u{143}\x0b\x2d\x03\x2e\x06\x2e\u{146}\x0a\x2e\x0d\x2e\x0e\x2e\u{147}\
		\x03\x2e\x03\x2e\x03\x2f\x06\x2f\u{14d}\x0a\x2f\x0d\x2f\x0e\x2f\u{14e}\
		\x03\x2f\x03\x2f\x06\x2f\u{153}\x0a\x2f\x0d\x2f\x0e\x2f\u{154}\x05\x2f\
		\u{157}\x0a\x2f\x03\x2f\x03\x2f\x04\u{112}\u{135}\x02\x30\x04\x03\x06\x04\
		\x08\x05\x0a\x06\x0c\x07\x0e\x08\x10\x09\x12\x0a\x14\x0b\x16\x0c\x18\x0d\
		\x1a\x0e\x1c\x0f\x1e\x10\x20\x11\x22\x12\x24\x13\x26\x14\x28\x15\x2a\x16\
		\x2c\x17\x2e\x18\x30\x19\x32\x1a\x34\x1b\x36\x1c\x38\x1d\x3a\x1e\x3c\x1f\
		\x3e\x20\x40\x21\x42\x22\x44\x23\x46\x24\x48\x25\x4a\x26\x4c\x02\x4e\x27\
		\x50\x28\x52\x29\x54\x2a\x56\x2b\x58\x2c\x5a\x2d\x5c\x2e\x5e\x2f\x04\x02\
		\x03\x0b\x03\x02\x33\x3b\x03\x02\x32\x3b\x04\x02\x47\x47\x67\x67\x05\x02\
		\x0b\x0c\x0f\x0f\x24\x24\x04\x02\x0b\x0b\x22\x22\x04\x02\x0c\x0c\x0f\x0f\
		\x03\x02\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\x63\x7c\x05\x02\x0b\x0c\
		\x0f\x0f\x22\x22\x02\u{16b}\x02\x04\x03\x02\x02\x02\x02\x06\x03\x02\x02\
		\x02\x02\x08\x03\x02\x02\x02\x02\x0a\x03\x02\x02\x02\x02\x0c\x03\x02\x02\
		\x02\x02\x0e\x03\x02\x02\x02\x02\x10\x03\x02\x02\x02\x02\x12\x03\x02\x02\
		\x02\x02\x14\x03\x02\x02\x02\x02\x16\x03\x02\x02\x02\x02\x18\x03\x02\x02\
		\x02\x02\x1a\x03\x02\x02\x02\x02\x1c\x03\x02\x02\x02\x02\x1e\x03\x02\x02\
		\x02\x02\x20\x03\x02\x02\x02\x02\x22\x03\x02\x02\x02\x02\x24\x03\x02\x02\
		\x02\x02\x26\x03\x02\x02\x02\x02\x28\x03\x02\x02\x02\x02\x2a\x03\x02\x02\
		\x02\x02\x2c\x03\x02\x02\x02\x02\x2e\x03\x02\x02\x02\x02\x30\x03\x02\x02\
		\x02\x02\x32\x03\x02\x02\x02\x02\x34\x03\x02\x02\x02\x02\x36\x03\x02\x02\
		\x02\x02\x38\x03\x02\x02\x02\x02\x3a\x03\x02\x02\x02\x02\x3c\x03\x02\x02\
		\x02\x02\x3e\x03\x02\x02\x02\x02\x40\x03\x02\x02\x02\x02\x42\x03\x02\x02\
		\x02\x02\x44\x03\x02\x02\x02\x02\x46\x03\x02\x02\x02\x02\x48\x03\x02\x02\
		\x02\x02\x4a\x03\x02\x02\x02\x02\x4e\x03\x02\x02\x02\x02\x50\x03\x02\x02\
		\x02\x02\x52\x03\x02\x02\x02\x02\x54\x03\x02\x02\x02\x02\x56\x03\x02\x02\
		\x02\x02\x58\x03\x02\x02\x02\x02\x5a\x03\x02\x02\x02\x03\x5c\x03\x02\x02\
		\x02\x03\x5e\x03\x02\x02\x02\x04\x60\x03\x02\x02\x02\x06\x6b\x03\x02\x02\
		\x02\x08\x73\x03\x02\x02\x02\x0a\x78\x03\x02\x02\x02\x0c\x7d\x03\x02\x02\
		\x02\x0e\u{82}\x03\x02\x02\x02\x10\u{89}\x03\x02\x02\x02\x12\u{8f}\x03\
		\x02\x02\x02\x14\u{97}\x03\x02\x02\x02\x16\u{9f}\x03\x02\x02\x02\x18\u{a2}\
		\x03\x02\x02\x02\x1a\u{a5}\x03\x02\x02\x02\x1c\u{a7}\x03\x02\x02\x02\x1e\
		\u{aa}\x03\x02\x02\x02\x20\u{ac}\x03\x02\x02\x02\x22\u{ae}\x03\x02\x02\
		\x02\x24\u{b0}\x03\x02\x02\x02\x26\u{b2}\x03\x02\x02\x02\x28\u{b4}\x03\
		\x02\x02\x02\x2a\u{b6}\x03\x02\x02\x02\x2c\u{b8}\x03\x02\x02\x02\x2e\u{ba}\
		\x03\x02\x02\x02\x30\u{bc}\x03\x02\x02\x02\x32\u{bf}\x03\x02\x02\x02\x34\
		\u{c2}\x03\x02\x02\x02\x36\u{c4}\x03\x02\x02\x02\x38\u{c6}\x03\x02\x02\
		\x02\x3a\u{c8}\x03\x02\x02\x02\x3c\u{ca}\x03\x02\x02\x02\x3e\u{cc}\x03\
		\x02\x02\x02\x40\u{d0}\x03\x02\x02\x02\x42\u{d4}\x03\x02\x02\x02\x44\u{d8}\
		\x03\x02\x02\x02\x46\u{dc}\x03\x02\x02\x02\x48\u{df}\x03\x02\x02\x02\x4a\
		\u{ec}\x03\x02\x02\x02\x4c\u{ee}\x03\x02\x02\x02\x4e\u{10c}\x03\x02\x02\
		\x02\x50\u{10e}\x03\x02\x02\x02\x52\u{117}\x03\x02\x02\x02\x54\u{11e}\x03\
		\x02\x02\x02\x56\u{124}\x03\x02\x02\x02\x58\u{12f}\x03\x02\x02\x02\x5a\
		\u{13d}\x03\x02\x02\x02\x5c\u{145}\x03\x02\x02\x02\x5e\u{14c}\x03\x02\x02\
		\x02\x60\x61\x07\x51\x02\x02\x61\x62\x07\x52\x02\x02\x62\x63\x07\x47\x02\
		\x02\x63\x64\x07\x50\x02\x02\x64\x65\x07\x53\x02\x02\x65\x66\x07\x43\x02\
		\x02\x66\x67\x07\x55\x02\x02\x67\x68\x07\x4f\x02\x02\x68\x69\x03\x02\x02\
		\x02\x69\x6a\x08\x02\x02\x02\x6a\x05\x03\x02\x02\x02\x6b\x6c\x07\x6b\x02\
		\x02\x6c\x6d\x07\x70\x02\x02\x6d\x6e\x07\x65\x02\x02\x6e\x6f\x07\x6e\x02\
		\x02\x6f\x70\x07\x77\x02\x02\x70\x71\x07\x66\x02\x02\x71\x72\x07\x67\x02\
		\x02\x72\x07\x03\x02\x02\x02\x73\x74\x07\x73\x02\x02\x74\x75\x07\x74\x02\
		\x02\x75\x76\x07\x67\x02\x02\x76\x77\x07\x69\x02\x02\x77\x09\x03\x02\x02\
		\x02\x78\x79\x07\x65\x02\x02\x79\x7a\x07\x74\x02\x02\x7a\x7b\x07\x67\x02\
		\x02\x7b\x7c\x07\x69\x02\x02\x7c\x0b\x03\x02\x02\x02\x7d\x7e\x07\x69\x02\
		\x02\x7e\x7f\x07\x63\x02\x02\x7f\u{80}\x07\x76\x02\x02\u{80}\u{81}\x07\
		\x67\x02\x02\u{81}\x0d\x03\x02\x02\x02\u{82}\u{83}\x07\x71\x02\x02\u{83}\
		\u{84}\x07\x72\x02\x02\u{84}\u{85}\x07\x63\x02\x02\u{85}\u{86}\x07\x73\
		\x02\x02\u{86}\u{87}\x07\x77\x02\x02\u{87}\u{88}\x07\x67\x02\x02\u{88}\
		\x0f\x03\x02\x02\x02\u{89}\u{8a}\x07\x74\x02\x02\u{8a}\u{8b}\x07\x67\x02\
		\x02\u{8b}\u{8c}\x07\x75\x02\x02\u{8c}\u{8d}\x07\x67\x02\x02\u{8d}\u{8e}\
		\x07\x76\x02\x02\u{8e}\x11\x03\x02\x02\x02\u{8f}\u{90}\x07\x6f\x02\x02\
		\u{90}\u{91}\x07\x67\x02\x02\u{91}\u{92}\x07\x63\x02\x02\u{92}\u{93}\x07\
		\x75\x02\x02\u{93}\u{94}\x07\x77\x02\x02\u{94}\u{95}\x07\x74\x02\x02\u{95}\
		\u{96}\x07\x67\x02\x02\u{96}\x13\x03\x02\x02\x02\u{97}\u{98}\x07\x64\x02\
		\x02\u{98}\u{99}\x07\x63\x02\x02\u{99}\u{9a}\x07\x74\x02\x02\u{9a}\u{9b}\
		\x07\x74\x02\x02\u{9b}\u{9c}\x07\x6b\x02\x02\u{9c}\u{9d}\x07\x67\x02\x02\
		\u{9d}\u{9e}\x07\x74\x02\x02\u{9e}\x15\x03\x02\x02\x02\u{9f}\u{a0}\x07\
		\x6b\x02\x02\u{a0}\u{a1}\x07\x68\x02\x02\u{a1}\x17\x03\x02\x02\x02\u{a2}\
		\u{a3}\x07\x72\x02\x02\u{a3}\u{a4}\x07\x6b\x02\x02\u{a4}\x19\x03\x02\x02\
		\x02\u{a5}\u{a6}\x07\x57\x02\x02\u{a6}\x1b\x03\x02\x02\x02\u{a7}\u{a8}\
		\x07\x45\x02\x02\u{a8}\u{a9}\x07\x5a\x02\x02\u{a9}\x1d\x03\x02\x02\x02\
		\u{aa}\u{ab}\x07\x5d\x02\x02\u{ab}\x1f\x03\x02\x02\x02\u{ac}\u{ad}\x07\
		\x5f\x02\x02\u{ad}\x21\x03\x02\x02\x02\u{ae}\u{af}\x07\x7d\x02\x02\u{af}\
		\x23\x03\x02\x02\x02\u{b0}\u{b1}\x07\x7f\x02\x02\u{b1}\x25\x03\x02\x02\
		\x02\u{b2}\u{b3}\x07\x2a\x02\x02\u{b3}\x27\x03\x02\x02\x02\u{b4}\u{b5}\
		\x07\x2b\x02\x02\u{b5}\x29\x03\x02\x02\x02\u{b6}\u{b7}\x07\x3d\x02\x02\
		\u{b7}\x2b\x03\x02\x02\x02\u{b8}\u{b9}\x07\x2e\x02\x02\u{b9}\x2d\x03\x02\
		\x02\x02\u{ba}\u{bb}\x07\x30\x02\x02\u{bb}\x2f\x03\x02\x02\x02\u{bc}\u{bd}\
		\x07\x2f\x02\x02\u{bd}\u{be}\x07\x40\x02\x02\u{be}\x31\x03\x02\x02\x02\
		\u{bf}\u{c0}\x07\x3f\x02\x02\u{c0}\u{c1}\x07\x3f\x02\x02\u{c1}\x33\x03\
		\x02\x02\x02\u{c2}\u{c3}\x07\x2d\x02\x02\u{c3}\x35\x03\x02\x02\x02\u{c4}\
		\u{c5}\x07\x2f\x02\x02\u{c5}\x37\x03\x02\x02\x02\u{c6}\u{c7}\x07\x2c\x02\
		\x02\u{c7}\x39\x03\x02\x02\x02\u{c8}\u{c9}\x07\x31\x02\x02\u{c9}\x3b\x03\
		\x02\x02\x02\u{ca}\u{cb}\x07\x60\x02\x02\u{cb}\x3d\x03\x02\x02\x02\u{cc}\
		\u{cd}\x07\x75\x02\x02\u{cd}\u{ce}\x07\x6b\x02\x02\u{ce}\u{cf}\x07\x70\
		\x02\x02\u{cf}\x3f\x03\x02\x02\x02\u{d0}\u{d1}\x07\x65\x02\x02\u{d1}\u{d2}\
		\x07\x71\x02\x02\u{d2}\u{d3}\x07\x75\x02\x02\u{d3}\x41\x03\x02\x02\x02\
		\u{d4}\u{d5}\x07\x76\x02\x02\u{d5}\u{d6}\x07\x63\x02\x02\u{d6}\u{d7}\x07\
		\x70\x02\x02\u{d7}\x43\x03\x02\x02\x02\u{d8}\u{d9}\x07\x67\x02\x02\u{d9}\
		\u{da}\x07\x7a\x02\x02\u{da}\u{db}\x07\x72\x02\x02\u{db}\x45\x03\x02\x02\
		\x02\u{dc}\u{dd}\x07\x6e\x02\x02\u{dd}\u{de}\x07\x70\x02\x02\u{de}\x47\
		\x03\x02\x02\x02\u{df}\u{e0}\x07\x75\x02\x02\u{e0}\u{e1}\x07\x73\x02\x02\
		\u{e1}\u{e2}\x07\x74\x02\x02\u{e2}\u{e3}\x07\x76\x02\x02\u{e3}\x49\x03\
		\x02\x02\x02\u{e4}\u{ed}\x07\x32\x02\x02\u{e5}\u{e9}\x09\x02\x02\x02\u{e6}\
		\u{e8}\x09\x03\x02\x02\u{e7}\u{e6}\x03\x02\x02\x02\u{e8}\u{eb}\x03\x02\
		\x02\x02\u{e9}\u{e7}\x03\x02\x02\x02\u{e9}\u{ea}\x03\x02\x02\x02\u{ea}\
		\u{ed}\x03\x02\x02\x02\u{eb}\u{e9}\x03\x02\x02\x02\u{ec}\u{e4}\x03\x02\
		\x02\x02\u{ec}\u{e5}\x03\x02\x02\x02\u{ed}\x4b\x03\x02\x02\x02\u{ee}\u{f1}\
		\x09\x04\x02\x02\u{ef}\u{f2}\x05\x34\x1a\x02\u{f0}\u{f2}\x05\x36\x1b\x02\
		\u{f1}\u{ef}\x03\x02\x02\x02\u{f1}\u{f0}\x03\x02\x02\x02\u{f1}\u{f2}\x03\
		\x02\x02\x02\u{f2}\u{f3}\x03\x02\x02\x02\u{f3}\u{f4}\x05\x4a\x25\x02\u{f4}\
		\x4d\x03\x02\x02\x02\u{f5}\u{f6}\x05\x4a\x25\x02\u{f6}\u{f7}\x05\x4c\x26\
		\x02\u{f7}\u{10d}\x03\x02\x02\x02\u{f8}\u{fa}\x05\x2e\x17\x02\u{f9}\u{fb}\
		\x09\x03\x02\x02\u{fa}\u{f9}\x03\x02\x02\x02\u{fb}\u{fc}\x03\x02\x02\x02\
		\u{fc}\u{fa}\x03\x02\x02\x02\u{fc}\u{fd}\x03\x02\x02\x02\u{fd}\u{ff}\x03\
		\x02\x02\x02\u{fe}\u{100}\x05\x4c\x26\x02\u{ff}\u{fe}\x03\x02\x02\x02\u{ff}\
		\u{100}\x03\x02\x02\x02\u{100}\u{10d}\x03\x02\x02\x02\u{101}\u{102}\x05\
		\x4a\x25\x02\u{102}\u{106}\x05\x2e\x17\x02\u{103}\u{105}\x09\x03\x02\x02\
		\u{104}\u{103}\x03\x02\x02\x02\u{105}\u{108}\x03\x02\x02\x02\u{106}\u{104}\
		\x03\x02\x02\x02\u{106}\u{107}\x03\x02\x02\x02\u{107}\u{10a}\x03\x02\x02\
		\x02\u{108}\u{106}\x03\x02\x02\x02\u{109}\u{10b}\x05\x4c\x26\x02\u{10a}\
		\u{109}\x03\x02\x02\x02\u{10a}\u{10b}\x03\x02\x02\x02\u{10b}\u{10d}\x03\
		\x02\x02\x02\u{10c}\u{f5}\x03\x02\x02\x02\u{10c}\u{f8}\x03\x02\x02\x02\
		\u{10c}\u{101}\x03\x02\x02\x02\u{10d}\x4f\x03\x02\x02\x02\u{10e}\u{110}\
		\x07\x24\x02\x02\u{10f}\u{111}\x0a\x05\x02\x02\u{110}\u{10f}\x03\x02\x02\
		\x02\u{111}\u{112}\x03\x02\x02\x02\u{112}\u{113}\x03\x02\x02\x02\u{112}\
		\u{110}\x03\x02\x02\x02\u{113}\u{114}\x03\x02\x02\x02\u{114}\u{115}\x07\
		\x24\x02\x02\u{115}\x51\x03\x02\x02\x02\u{116}\u{118}\x09\x06\x02\x02\u{117}\
		\u{116}\x03\x02\x02\x02\u{118}\u{119}\x03\x02\x02\x02\u{119}\u{117}\x03\
		\x02\x02\x02\u{119}\u{11a}\x03\x02\x02\x02\u{11a}\u{11b}\x03\x02\x02\x02\
		\u{11b}\u{11c}\x08\x29\x03\x02\u{11c}\x53\x03\x02\x02\x02\u{11d}\u{11f}\
		\x09\x07\x02\x02\u{11e}\u{11d}\x03\x02\x02\x02\u{11f}\u{120}\x03\x02\x02\
		\x02\u{120}\u{11e}\x03\x02\x02\x02\u{120}\u{121}\x03\x02\x02\x02\u{121}\
		\u{122}\x03\x02\x02\x02\u{122}\u{123}\x08\x2a\x03\x02\u{123}\x55\x03\x02\
		\x02\x02\u{124}\u{125}\x07\x31\x02\x02\u{125}\u{126}\x07\x31\x02\x02\u{126}\
		\u{12a}\x03\x02\x02\x02\u{127}\u{129}\x0a\x07\x02\x02\u{128}\u{127}\x03\
		\x02\x02\x02\u{129}\u{12c}\x03\x02\x02\x02\u{12a}\u{128}\x03\x02\x02\x02\
		\u{12a}\u{12b}\x03\x02\x02\x02\u{12b}\u{12d}\x03\x02\x02\x02\u{12c}\u{12a}\
		\x03\x02\x02\x02\u{12d}\u{12e}\x08\x2b\x04\x02\u{12e}\x57\x03\x02\x02\x02\
		\u{12f}\u{130}\x07\x31\x02\x02\u{130}\u{131}\x07\x2c\x02\x02\u{131}\u{135}\
		\x03\x02\x02\x02\u{132}\u{134}\x0b\x02\x02\x02\u{133}\u{132}\x03\x02\x02\
		\x02\u{134}\u{137}\x03\x02\x02\x02\u{135}\u{136}\x03\x02\x02\x02\u{135}\
		\u{133}\x03\x02\x02\x02\u{136}\u{138}\x03\x02\x02\x02\u{137}\u{135}\x03\
		\x02\x02\x02\u{138}\u{139}\x07\x2c\x02\x02\u{139}\u{13a}\x07\x31\x02\x02\
		\u{13a}\u{13b}\x03\x02\x02\x02\u{13b}\u{13c}\x08\x2c\x04\x02\u{13c}\x59\
		\x03\x02\x02\x02\u{13d}\u{141}\x09\x08\x02\x02\u{13e}\u{140}\x09\x09\x02\
		\x02\u{13f}\u{13e}\x03\x02\x02\x02\u{140}\u{143}\x03\x02\x02\x02\u{141}\
		\u{13f}\x03\x02\x02\x02\u{141}\u{142}\x03\x02\x02\x02\u{142}\x5b\x03\x02\
		\x02\x02\u{143}\u{141}\x03\x02\x02\x02\u{144}\u{146}\x09\x0a\x02\x02\u{145}\
		\u{144}\x03\x02\x02\x02\u{146}\u{147}\x03\x02\x02\x02\u{147}\u{145}\x03\
		\x02\x02\x02\u{147}\u{148}\x03\x02\x02\x02\u{148}\u{149}\x03\x02\x02\x02\
		\u{149}\u{14a}\x08\x2e\x03\x02\u{14a}\x5d\x03\x02\x02\x02\u{14b}\u{14d}\
		\x09\x03\x02\x02\u{14c}\u{14b}\x03\x02\x02\x02\u{14d}\u{14e}\x03\x02\x02\
		\x02\u{14e}\u{14c}\x03\x02\x02\x02\u{14e}\u{14f}\x03\x02\x02\x02\u{14f}\
		\u{156}\x03\x02\x02\x02\u{150}\u{152}\x07\x30\x02\x02\u{151}\u{153}\x09\
		\x03\x02\x02\u{152}\u{151}\x03\x02\x02\x02\u{153}\u{154}\x03\x02\x02\x02\
		\u{154}\u{152}\x03\x02\x02\x02\u{154}\u{155}\x03\x02\x02\x02\u{155}\u{157}\
		\x03\x02\x02\x02\u{156}\u{150}\x03\x02\x02\x02\u{156}\u{157}\x03\x02\x02\
		\x02\u{157}\u{158}\x03\x02\x02\x02\u{158}\u{159}\x08\x2f\x05\x02\u{159}\
		\x5f\x03\x02\x02\x02\x16\x02\x03\u{e9}\u{ec}\u{f1}\u{fc}\u{ff}\u{106}\u{10a}\
		\u{10c}\u{112}\u{119}\u{120}\u{12a}\u{135}\u{141}\u{147}\u{14e}\u{154}\
		\u{156}\x06\x07\x03\x02\x02\x03\x02\x08\x02\x02\x06\x02\x02";
