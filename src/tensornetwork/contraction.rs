use log::debug;
use tetra::contract;

use crate::{
    tensornetwork::{tensor::Tensor, tensordata::TensorData},
    types::ContractionIndex,
};

/// Fully contracts `tn` based on the given `contract_path` using ReplaceLeft format.
/// Returns the resulting tensor.
///
/// # Examples
/// ```
/// # use tensorcontraction::{
///     contractionpath::paths::{branchbound::BranchBound, CostType, OptimizePath},
///     random::tensorgeneration::random_tensor_network_with_rng,
///     tensornetwork::tensor::Tensor,
///     tensornetwork::contraction::contract_tensor_network,
/// };
/// # use rand::rngs::StdRng;
/// # use rand::SeedableRng;
/// let mut r = StdRng::seed_from_u64(42);
/// let mut r_tn = random_tensor_network_with_rng(2, 3, &mut r);
/// let mut opt = BranchBound::new(&r_tn, None, 20., CostType::Flops);
/// opt.optimize_path();
/// let opt_path = opt.get_best_replace_path();
/// let result = contract_tensor_network(r_tn, &opt_path);
/// ```
pub fn contract_tensor_network(mut tn: Tensor, contract_path: &[ContractionIndex]) -> Tensor {
    debug!(len = tn.tensors().len(); "Start contracting tensor network");
    for contract_index in contract_path {
        match contract_index {
            ContractionIndex::Pair(i, j) => {
                debug!(i, j; "Contracting tensors");
                tn.contract_tensors(*i, *j);
                debug!(i, j; "Finished contracting tensors");
            }
            ContractionIndex::Path(i, inner_contract_path) => {
                let composite = std::mem::take(&mut tn.tensors[*i]);
                let contracted = contract_tensor_network(composite, inner_contract_path);
                tn.tensors[*i] = contracted;
            }
        }
    }
    debug!("Completed tensor network contraction");

    tn.tensors
        .retain(|x| !matches!(x.tensor_data(), TensorData::Uncontracted) || x.is_composite());
    assert!(tn.tensors().len() <= 1, "Not fully contracted");
    tn.tensors.pop().unwrap_or(tn)
}

pub(crate) trait TensorContraction {
    /// Contracts two tensors
    fn contract_tensors(&mut self, tensor_a_loc: usize, tensor_b_loc: usize);
}

impl TensorContraction for Tensor {
    fn contract_tensors(&mut self, tensor_a_loc: usize, tensor_b_loc: usize) {
        let tensor_a = std::mem::take(&mut self.tensors[tensor_a_loc]);
        let tensor_b = std::mem::take(&mut self.tensors[tensor_b_loc]);

        let mut tensor_symmetric_difference = &tensor_b ^ &tensor_a;

        let Tensor {
            legs: a_legs,
            tensordata: a_data,
            ..
        } = tensor_a;

        let Tensor {
            legs: b_legs,
            tensordata: b_data,
            ..
        } = tensor_b;

        let result = contract(
            &tensor_symmetric_difference.legs,
            &a_legs,
            a_data.into_data(),
            &b_legs,
            b_data.into_data(),
        );

        tensor_symmetric_difference.set_tensor_data(TensorData::Matrix(result));
        self.tensors[tensor_a_loc] = tensor_symmetric_difference;
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    use float_cmp::assert_approx_eq;
    use num_complex::Complex64;
    use rustc_hash::FxHashMap;
    use tetra::Layout;

    use crate::{
        path,
        tensornetwork::{contraction::TensorContraction, tensor::Tensor, tensordata::TensorData},
    };

    fn setup() -> (
        Vec<Complex64>,
        Vec<Complex64>,
        Vec<Complex64>,
        Vec<Complex64>,
    ) {
        let d1 = [
            0.69469607, 0.03142814, 0.56333184, 0.12908922, 0.68881492, 0.38906653, 0.28704775,
            0.66259172, 0.03017098, 0.0216769, 0.13239795, 0.56624022, 0.60589695, 0.52471058,
            0.08573655, 0.06819372, 0.1568983, 0.41559434, 0.6708583, 0.60417368, 0.98723314,
            0.25018858, 0.14947663, 0.70206464, 0.49755784, 0.50813521, 0.54859423, 0.62646753,
            0.95172281, 0.12807469, 0.56603429, 0.05893249, 0.64737241, 0.04312631, 0.80191274,
            0.17439514, 0.00265264, 0.4052311, 0.91152868, 0.88411605, 0.8787456, 0.88505868,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();

        let d2 = [
            0.09328754, 0.56783732, 0.16813387, 0.82429821, 0.0184785, 0.73521183, 0.56154307,
            0.36866055, 0.93516298, 0.66265138, 0.75256279, 0.46568749, 0.14677414, 0.24352534,
            0.42248108, 0.4729148, 0.98754226, 0.65741335, 0.71002821, 0.36600333, 0.68610491,
            0.05782579, 0.18485907, 0.94518584, 0.95895765, 0.85841239, 0.05705296, 0.09616524,
            0.63222811, 0.87366903, 0.90875357, 0.47705938, 0.65134858, 0.6608632, 0.95581392,
            0.32332593, 0.53788954, 0.903023, 0.40153079, 0.37487737, 0.30883193, 0.53174817,
            0.39644565, 0.25535147, 0.58535347, 0.77200294, 0.86162035, 0.75814678, 0.72907822,
            0.19955574, 0.18811225, 0.26336036, 0.15323682, 0.26735153, 0.55806485, 0.05887273,
            0.18610468, 0.50636222, 0.45368943, 0.42390405, 0.96522828, 0.84946421, 0.40025282,
            0.19881981, 0.02848654, 0.33727215, 0.95483207, 0.77974469, 0.31792446, 0.39641724,
            0.18105829, 0.17672455, 0.93845113, 0.06969526, 0.02687802, 0.89507515, 0.48635865,
            0.32632963, 0.30049458, 0.097193, 0.98697788, 0.61149565, 0.00866831, 0.71612395,
            0.82291458, 0.49291276, 0.61479999, 0.94664182, 0.4173764, 0.99885288, 0.797537,
            0.11157382, 0.71116417, 0.49948545, 0.99517939, 0.14450441, 0.51148864, 0.35196431,
            0.62919375, 0.35710482, 0.51206311, 0.20117422, 0.88595471, 0.55022357, 0.74170559,
            0.29588465, 0.93177878, 0.25674534, 0.77183918, 0.46184645, 0.48719714, 0.62120151,
            0.50764396, 0.78361974, 0.65953757, 0.20511562, 0.73759098, 0.14039605, 0.83019634,
            0.8332694, 0.55324321, 0.10042969, 0.18699679, 0.18950935, 0.89248192, 0.74924386,
            0.92748739, 0.80220305, 0.47501941, 0.26003983, 0.95522559, 0.91094124, 0.6795759,
            0.41454924, 0.80801303, 0.59779671, 0.51192525, 0.91462506, 0.92084146, 0.61720142,
            0.57376556, 0.24997149, 0.57329336, 0.43957024, 0.50238366, 0.67373356, 0.11259408,
            0.37683318, 0.49300396, 0.6711206, 0.94882965, 0.59395913, 0.05114786, 0.73600206,
            0.00601697, 0.5727972, 0.67090141, 0.58077019, 0.64640978, 0.55276303, 0.06095278,
            0.07539359, 0.17735247, 0.82562252, 0.78428553, 0.1906632, 0.33509431, 0.42012132,
            0.00159857, 0.60167655, 0.24232731, 0.83693469, 0.03338013, 0.85122908, 0.40059668,
            0.71621368, 0.34265388, 0.09638051, 0.64427604, 0.23733484, 0.56653551, 0.52411397,
            0.00628771, 0.57258058, 0.16022726, 0.36959163, 0.75623427, 0.58954677, 0.82969614,
            0.87791391, 0.81419296, 0.9083103, 0.02033065, 0.33228088, 0.6885901, 0.70155266,
            0.41101974, 0.15976186, 0.23377142, 0.06092987, 0.45264005, 0.2132634, 0.09463183,
            0.29559498, 0.90050621, 0.90966579, 0.33135194, 0.75781385, 0.89580607, 0.89514179,
            0.56557729, 0.08695989, 0.64372738, 0.15244104, 0.61556173, 0.43501657, 0.83772869,
            0.95057826, 0.74261719, 0.79065485, 0.11257079, 0.40928239, 0.83167007, 0.89305546,
            0.38080999, 0.64519961, 0.86476415, 0.81232636, 0.52187504, 0.9641269, 0.87137541,
            0.33997589, 0.5117147, 0.97633497, 0.17706302, 0.72655448, 0.36950375, 0.73625114,
            0.99500737, 0.9711593, 0.88231438, 0.00364066, 0.63363962, 0.77629796, 0.76189465,
            0.79594656, 0.06046632, 0.37121335, 0.11968514, 0.34248849, 0.04004532, 0.12645287,
            0.27779065, 0.10250479, 0.24468091, 0.13638938, 0.3328005, 0.84108116, 0.13515933,
            0.65145451, 0.4327036, 0.05269428, 0.9111833, 0.69159617, 0.14994096, 0.79117789,
            0.78700038, 0.16870521, 0.78504774, 0.44292063, 0.62066272, 0.81990975, 0.9322563,
            0.28132287, 0.21205641, 0.7865617, 0.61846373, 0.8919656, 0.87968058, 0.27411728,
            0.38383478, 0.70716565, 0.2629087, 0.67097425, 0.69508973, 0.11427584, 0.92469918,
            0.69439856, 0.67802797, 0.85167929, 0.31096221, 0.92851952, 0.20776057, 0.91726347,
            0.90551286, 0.24317468, 0.48989766, 0.57365687, 0.56664079, 0.37988123, 0.84965442,
            0.04234216, 0.72334513, 0.90954789, 0.35181637, 0.64300879, 0.78047689, 0.88886375,
            0.66392189, 0.71558052, 0.33957753, 0.86017955, 0.24987067, 0.75239371, 0.846215,
            0.80888273, 0.25652923, 0.47976616, 0.71021803, 0.25107151, 0.25820616, 0.65540941,
            0.05381956, 0.31208421, 0.80435833, 0.51970853, 0.92648614, 0.93166913, 0.30201433,
            0.58696402, 0.73332323, 0.389746, 0.40119842, 0.93395815, 0.47877774, 0.61972036,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();

        let d3 = [
            0.42667703, 0.48457094, 0.68925937, 0.99198568, 0.55416889, 0.38235533, 0.23278915,
            0.35852096, 0.58649561, 0.93958456, 0.64993388, 0.89260841, 0.50899537, 0.45536893,
            0.25893103, 0.61086187, 0.98899915, 0.91573474, 0.19398411, 0.68390863, 0.39154508,
            0.73696751, 0.5698224, 0.78365831, 0.46399883, 0.96999598, 0.96014711, 0.72481088,
            0.30197295, 0.32362527, 0.85744741, 0.03117345, 0.99394162, 0.73509025, 0.02588929,
            0.79422479, 0.19915962, 0.57046363, 0.74970349, 0.92350756, 0.90096793, 0.63684391,
            0.07446369, 0.25514523, 0.97320958, 0.87981084, 0.4379634, 0.63565715, 0.83553603,
            0.3833003, 0.0772783, 0.16907803, 0.15863019, 0.04340611, 0.15821493, 0.11871337,
            0.9943052, 0.24349509, 0.13325565, 0.15391281, 0.01091549, 0.28614178, 0.41929479,
            0.74795668, 0.40158558, 0.96101644, 0.49369888, 0.63394661, 0.80317387, 0.52994169,
            0.66743804, 0.76277137, 0.25734803, 0.90787102, 0.86028783, 0.9712097, 0.79091853,
            0.97385292, 0.28053365, 0.21851811, 0.21683468, 0.89221896, 0.14093243, 0.5011467,
            0.04057924, 0.2620503, 0.97840279, 0.35671425, 0.07766314, 0.38162112, 0.88516118,
            0.74285925, 0.86502545, 0.86329524, 0.59698018, 0.41562044, 0.16286828, 0.24323371,
            0.00842274, 0.19534713, 0.83349213, 0.89453333, 0.8861164, 0.8331781, 0.72101998,
            0.00771226, 0.21253237, 0.882532, 0.07932374, 0.59678746, 0.04757306, 0.71880735,
            0.91201475, 0.51059997, 0.51537244, 0.24251543, 0.80763707, 0.75864631, 0.37702641,
            0.79754793,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();

        let dout = [
            21.126621907030007,
            22.547816841708674,
            19.14112551809507,
            21.503836424309732,
            20.41325586481537,
            21.21790454002527,
            19.02018307674345,
            19.806170649587813,
            18.142984594114292,
            19.234446560307692,
            22.097573731265648,
            23.841876480187175,
            20.99919351904732,
            21.008264617244045,
            17.480694363590203,
            20.771908442718903,
            18.610670625308884,
            20.649070389372863,
            17.893398386527164,
            19.467488435080917,
            18.55191736454154,
            18.479897751096676,
            21.514242579380813,
            23.152717708482864,
            21.586185953110945,
            21.872670040153444,
            19.59396099485156,
            22.661000415666994,
            19.695756748329796,
            21.822185089600307,
            19.898006782762067,
            21.31436563900984,
            19.461947712123074,
            19.867007938569017,
            22.588509969427133,
            24.517726508073167,
            22.31452843822771,
            23.6257529909008,
            20.013370213271227,
            22.48410561820693,
            21.1335402936866,
            22.92646173916976,
            20.283171643798816,
            20.828157151879164,
            19.11679716343333,
            21.637299768773676,
            23.814383286206898,
            25.895136358862384,
            25.95290252824067,
            27.820503801990498,
            23.56074292027116,
            27.024668690897467,
            24.124863762480903,
            26.504157016247454,
            24.024788605718452,
            25.813698692026055,
            22.495203409410074,
            24.567439106113888,
            26.9066630961286,
            30.23243802598983,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();

        (d1, d2, d3, dout)
    }

    fn intermediate_data() -> (Vec<Complex64>, Vec<Complex64>) {
        let d12 = vec![
            0.9926196637820883,
            1.063282683681944,
            1.562838004529501,
            1.660508453780904,
            1.0962189084996603,
            2.0768101676710695,
            1.1607595730966465,
            1.1163373337339253,
            1.4634343141085253,
            1.4586087246819006,
            1.703149389314484,
            1.9070719868402772,
            1.3017936173031615,
            1.0826187208577351,
            1.3245231480598216,
            1.460255952323364,
            1.2693552734409725,
            1.8282437228743311,
            1.8825282018233997,
            1.9665597895835418,
            2.1575973446561854,
            2.0478467078046396,
            2.2748108311688773,
            2.756873076120157,
            1.0089372813521462,
            0.8966193824486355,
            1.2384263768561885,
            1.3893076834257303,
            0.8216577904666498,
            1.8773012051331033,
            1.4021343427259396,
            1.6424503849384486,
            1.8853644648793826,
            1.7915311288292983,
            1.7606980689047997,
            2.474708840495504,
            1.4736869728008746,
            1.1778783213701451,
            1.7068462642295485,
            2.037237790748474,
            2.0433921257706458,
            2.3845601612413345,
            0.9007883108075141,
            0.7236280953221063,
            0.8740203771625574,
            1.1698034464832965,
            0.9553099122302466,
            1.4241222959035056,
            1.5789067060334139,
            1.233970305789847,
            1.0901090764126204,
            1.4105255862948392,
            2.027739739436018,
            1.4497137604936214,
            1.1827632423477068,
            1.1874786629700493,
            1.3599713819584678,
            1.4710421259112432,
            1.519221768059257,
            1.9049248658780953,
            1.3061554820719798,
            0.9084949411427685,
            0.8912414757780251,
            1.3382977595996297,
            1.8194961527413325,
            1.1358826666742141,
            0.9172614177202161,
            0.8460757689846933,
            0.9969013956358532,
            1.1026817909106892,
            1.1780248961392599,
            1.417177721243638,
            1.6259590197198732,
            1.3559682706155338,
            2.089082364796246,
            2.1989477023131534,
            2.016026607647638,
            2.744729540655952,
            1.2096439311400087,
            0.8733052994834432,
            1.1066239988573645,
            1.3461078713152395,
            1.2634785527420909,
            1.6930672426478086,
            1.1950452479010643,
            1.103575793905565,
            1.4928316968794306,
            1.5849528827200534,
            1.5723319254939172,
            2.009557587557302,
            1.5922206324647452,
            1.3949904256735914,
            1.8700193975352644,
            1.8888885379502336,
            2.0855924349954047,
            2.4334411766217374,
            1.8282915784083686,
            1.5677569675488265,
            1.3409441938878879,
            1.4962208471706264,
            2.1108495082330716,
            1.8293930939007836,
            2.046870531916261,
            1.8266081859140697,
            1.9771179353560895,
            2.121645460553358,
            2.2482698473583387,
            2.601420966665593,
            1.5838933904100758,
            1.3487145821624629,
            1.5347705060854027,
            1.7221279412941841,
            2.1796549851959237,
            1.8648597648601886,
            1.0693988818142364,
            1.290144139023531,
            1.7893050758115998,
            1.7213386887790412,
            1.4101391703471058,
            2.337637414076694,
            1.8057142469060632,
            1.5590709719843812,
            1.8708997919480224,
            2.107646602350809,
            2.1252211323076686,
            2.6712661837263045,
            0.48724315617331004,
            0.5722801754798155,
            0.9738050360309756,
            0.8218119363722778,
            0.8713021428668861,
            1.0562350970706786,
            1.5210382840639576,
            1.2691295924395183,
            1.596425764708122,
            1.8482866931539645,
            1.3988963175049218,
            2.3200606173859972,
            2.0014467604982795,
            1.8219953622047238,
            1.9573035103527503,
            2.1962619937166785,
            2.419839370236596,
            2.639575511324222,
            1.7146456010700717,
            1.3722298663753183,
            1.1329497024382116,
            1.4338766919302928,
            2.0952658570835423,
            1.488934968184289,
            1.9113375507113575,
            2.065134315875704,
            2.2026608898589184,
            1.9834679464674392,
            2.1710546198727227,
            2.9406086604408435,
            1.237727701528748,
            1.4161097192784393,
            1.9458610859928802,
            1.6093673520520024,
            1.3711494361573884,
            2.4037690932824347,
            1.1521724341374144,
            1.1799878735003202,
            1.8777428485766396,
            1.708372530963521,
            1.5305276956855112,
            2.4220184033900387,
            1.418176606283532,
            1.1313524712794278,
            1.0443515397825212,
            1.5226451238493193,
            1.4835841843775515,
            1.5200623313739017,
            1.741109001219433,
            1.469528608882566,
            1.584292603453713,
            1.9684264069910236,
            2.0163383315229213,
            2.408454790077654,
            2.233159741373377,
            1.9039836444575027,
            2.044483771479054,
            2.330774169430593,
            2.586665114382482,
            2.8095635318466083,
            1.8850467357840313,
            1.5654471160604142,
            1.8133956978612245,
            2.1143178484644327,
            1.7775955363670939,
            2.7936513602680706,
            1.4944694818586415,
            1.4329845706171105,
            1.4137087643872983,
            1.681165725763124,
            1.5291703721192043,
            2.0054655497645224,
            1.3792578665675541,
            1.354420236400941,
            1.4290625726100523,
            1.3800378394019905,
            1.815545101080584,
            1.7078215856393952,
            1.9791659674416775,
            1.3859713443163826,
            1.261555621436352,
            1.8210903846840427,
            2.101567583973053,
            2.1396044716295477,
            1.7460696891117744,
            1.3873093525501605,
            1.6463917863735964,
            1.985349153957895,
            1.7391082076832496,
            2.329356568675524,
            1.6864808935250584,
            1.5632557847832755,
            1.9621605643476225,
            2.1249438056472543,
            2.0449116378032253,
            2.6045615751105284,
            2.104324228723905,
            2.050648210124268,
            2.092664657860101,
            2.156236883521705,
            2.2674708930854366,
            2.9007069608095755,
            1.9626714404593653,
            1.815488456684133,
            2.2364474711160645,
            2.268540226319291,
            2.263622777724991,
            2.7682263230830637,
            1.3091127802952194,
            1.2131701235135572,
            1.7419149894432997,
            1.846668091614913,
            1.8291672600901236,
            2.1980966750726525,
            1.125235617020003,
            0.9303207289900999,
            1.0751998579885296,
            1.238573158947381,
            1.2366000772671923,
            1.4654744195793954,
            2.079878446382276,
            1.74052358500444,
            2.072512677641765,
            2.3601326785906145,
            2.3067384301177754,
            2.8070215047504137,
            1.3515867543427331,
            1.0511671735062014,
            1.5487297474916213,
            1.9347651785855955,
            1.7592705193890277,
            2.170344807974418,
            1.478082466140244,
            1.2864433283552947,
            1.6489219947488707,
            1.788656339737203,
            1.4532444786443501,
            2.40924824710575,
            1.4994375075108899,
            1.3724880968989641,
            1.5974389316103068,
            1.8888113715958537,
            1.6127527333593539,
            2.385344120966417,
            1.6258436885576073,
            1.6244374433197293,
            1.9893238734140115,
            1.9020174634600389,
            2.2224442484178786,
            2.6154570539884205,
            2.240476341895023,
            2.0960580993758318,
            2.2689131911409146,
            2.484742341988867,
            2.3879243028989023,
            3.243402503223457,
            2.0131056623108026,
            1.9323058152648713,
            2.2041677129492294,
            2.234481293169949,
            2.198003993762024,
            3.1559849399624857,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();

        let d23 = vec![
            2.263654563208168,
            1.9117219638552305,
            2.0806940293732215,
            1.7261569976187743,
            2.3332280905530585,
            2.933478059630214,
            3.3064307567232714,
            1.7032020992802779,
            1.5520558576152828,
            2.0172922465833434,
            1.211261765750641,
            1.4662460640587023,
            2.983356355254693,
            1.618765022494523,
            2.374414031777066,
            1.2964137672406106,
            3.0279693634065596,
            2.7109771215253957,
            1.8695523469348498,
            2.735240443881672,
            1.8606030478150273,
            2.036259388225732,
            1.1817351627340396,
            2.0067888112580428,
            2.270884686896542,
            2.237728803848461,
            2.2725592189315136,
            2.104183271478103,
            2.3181827047591175,
            2.3727885610275963,
            1.2899456690166307,
            2.0984598022387173,
            2.17280842072854,
            0.9493063970491727,
            2.4147609364091434,
            2.626439888965006,
            2.9481221883627446,
            2.165818549434587,
            2.4544305104023874,
            3.261498397458855,
            1.3472693281688666,
            2.615960422289487,
            2.59487353731326,
            2.2083659790386347,
            2.6514647488412,
            2.3835821974358726,
            2.888124201062654,
            3.332442460322173,
            3.7463422273634404,
            1.6959765494862504,
            1.885841726010137,
            2.39757169600517,
            1.6637712498773656,
            1.7711517223975584,
            3.6651858197125677,
            2.107445743287393,
            2.912141061867685,
            1.5388672710829727,
            3.6187885708274883,
            2.9138235476345318,
            2.5723806128189137,
            3.19586947864582,
            2.0221123778190107,
            2.5964217580954503,
            1.4827422525456806,
            2.5477028052453496,
            2.3700878179217546,
            2.5049502300372826,
            2.6218416312990875,
            2.4744571728113716,
            2.6530417849949117,
            2.7657971667226815,
            1.5551667646705336,
            2.415934138494945,
            2.5068229650140053,
            1.267531767245485,
            2.6745017993700335,
            2.94051306951127,
            3.6041725286588737,
            2.418860917381389,
            2.738698425290455,
            3.8353790550943567,
            1.7117726300153127,
            2.9974771780674843,
            2.7829285084281308,
            2.5990942279265705,
            2.763713064610752,
            2.8966164071110287,
            2.828562240773641,
            3.4050101426151715,
            3.7551662756138944,
            1.416554345245658,
            2.2970704496082996,
            2.765796038669668,
            1.9108941403485642,
            2.1768266560805434,
            3.9269596704612386,
            2.4322372563219754,
            3.2337826177414497,
            1.643022059767869,
            3.8203351921980198,
            2.986305234066638,
            2.8284769272404513,
            3.411606293604176,
            1.8211541855176092,
            2.69727453802737,
            1.9513187026072352,
            2.920826881391145,
            2.1727220537247773,
            2.7694530939377375,
            2.9575475726979117,
            2.6961506448510724,
            2.840627864220277,
            2.976151038330796,
            2.148864864849876,
            2.7570584149269872,
            3.120826094257586,
            1.6630149642413878,
            2.8849342999395144,
            3.2393565676094034,
            3.852632488249951,
            2.7623057464736456,
            2.714492941489093,
            4.171971571017963,
            1.7122531823307199,
            3.2060211962185736,
            2.3007862295064623,
            2.316039161894207,
            2.4786188755434666,
            2.1096380777527473,
            2.612638738305181,
            2.9571879282750273,
            3.6095483693868364,
            2.0091030869729276,
            1.759396869063728,
            2.3870422010963317,
            1.2083368446155371,
            2.1784258218762,
            3.394451044013059,
            1.9537709444779376,
            2.934702686701424,
            1.8126624309217756,
            3.2660276249447184,
            3.0177402993198634,
            2.565652196964669,
            2.926047817923291,
            1.5062875261714577,
            2.359945928224968,
            0.9173448909690289,
            1.9229838554626466,
            2.485866665159569,
            2.5751236810596896,
            2.649458580533453,
            2.132510166370139,
            2.3724157433359823,
            2.7895396295257933,
            1.6173659190750214,
            2.222353725155703,
            2.273962795779608,
            1.2421521838288023,
            2.0359692299087366,
            2.8171205673885806,
            3.5922932630185302,
            2.082197569356084,
            2.9412363660296186,
            3.6635768847542147,
            1.5987337260188723,
            2.803427310613786,
            2.5520038103661298,
            2.4883141563484794,
            2.634944413744278,
            2.7547310478236438,
            2.4423712150416375,
            3.2980429784435974,
            3.630025773153465,
            1.4248113490495602,
            2.2727132650190236,
            2.652056577055359,
            1.9641218017347744,
            2.082239060413429,
            3.702615977681652,
            2.2875691372052867,
            3.2128991594601835,
            1.5651384701049904,
            3.5023081051092757,
            2.8312990074694904,
            2.707008264278975,
            3.2428154922194916,
            1.8038223032070526,
            2.543009164517996,
            2.00837871521872,
            2.8445719052131215,
            1.8606093726201907,
            2.5602333726565862,
            2.89664265584101,
            2.4551059850974233,
            2.8084459074588977,
            2.9185083383044894,
            2.1263461614069032,
            2.710207911289577,
            3.057755941815175,
            1.5738619441687551,
            2.938065297329925,
            3.163500124637339,
            3.716602434493776,
            2.77496294974145,
            2.5961561393172508,
            4.032440124042128,
            1.6522115911908883,
            3.1767244404286252,
            2.85413147848943,
            2.6708444265535043,
            2.130079905743166,
            2.544575999453961,
            2.7557936356324406,
            3.0986219907379464,
            3.372826186050722,
            0.9196284338173639,
            2.014752215594405,
            2.8168939389934375,
            1.7716520355794891,
            2.0579978230079954,
            3.4882054627340544,
            2.1316521143558913,
            2.5822180036372746,
            1.4261780877403152,
            3.601984089954126,
            2.826329703724087,
            2.2349289659611524,
            3.0591538226423536,
            1.4497195558947011,
            2.606171687896076,
            1.7250972700432219,
            2.8587221858526997,
            2.2666640028049865,
            3.0230252946366694,
            2.7718474734908223,
            2.817242948572746,
            2.3813236769959696,
            2.667770554552919,
            2.0185891840619075,
            2.7220387290980987,
            3.188963994473644,
            1.5455220537375458,
            2.6756936299571024,
            2.9109327276755694,
            3.136410880675609,
            2.580632689376563,
            2.5269235582270433,
            3.8177643236548615,
            1.394503932050313,
            2.728188063745299,
            0.7483080017243142,
            1.0265213524641763,
            0.8179243221261963,
            1.1839469276713435,
            0.7043944970798685,
            1.3301653379789566,
            1.4458955313813353,
            0.49329079636254447,
            0.5419932095922655,
            0.874122822287836,
            0.5964522489570182,
            0.6998463728201467,
            1.2829685681284633,
            0.7649606093581391,
            1.218605669010481,
            0.6491344471824133,
            1.296685095794691,
            0.8232265408490369,
            1.062330284761699,
            1.2545107930335346,
            0.4490448356463381,
            1.0036785822200818,
            0.6308628388000491,
            1.1687942574406192,
            0.5443847235941306,
            0.8143329918101857,
            1.1993459984496952,
            1.0468728963074838,
            0.8074733026439684,
            0.7594600480977808,
            0.9844885661130318,
            0.6452658133006592,
            1.0543759646454263,
            0.8952586283381648,
            1.1359585132781223,
            1.194163216385099,
            1.3960030959615721,
            1.217121227079167,
            0.9554060651429133,
            1.6020109029268195,
            0.623037770751307,
            1.363230679942662,
            1.150888497527087,
            1.4586556511968989,
            1.349961910213178,
            1.9776342000460114,
            1.416012069267441,
            1.9695715833246328,
            2.1741899556836835,
            0.7646630045492645,
            1.4070365792540507,
            1.4279249437233972,
            1.2216425293102702,
            1.1765630398507572,
            2.173788617601932,
            1.4431485611389903,
            1.8905702569446292,
            1.0456027394959877,
            1.8579728648000349,
            1.4763311269189088,
            1.7650770248846142,
            1.891207658561188,
            1.0551623639755041,
            1.5903400544072857,
            1.4122412848327006,
            1.7930282802847368,
            0.882558921519327,
            1.6934282474034625,
            1.6969244014203926,
            1.7604146823675735,
            1.8532911416827882,
            1.7897305785936677,
            1.5850301067248294,
            1.3270378228633053,
            1.9224681163929187,
            1.1643053963174237,
            1.8737192117401777,
            2.086522557951741,
            2.219709092582484,
            1.637969834841565,
            1.398725197755248,
            2.5798274380322246,
            0.9466367270694683,
            2.0267884107699765,
            3.0128987196516563,
            2.674333633937254,
            2.715247459042892,
            2.5045066418590642,
            3.213045455691026,
            3.4727990367351405,
            3.981508385883637,
            1.571990477289946,
            2.1509693442908033,
            2.9976245961662533,
            2.0592772512158968,
            2.211787695755527,
            3.9478222825999474,
            2.2814159628189543,
            3.052462486068564,
            1.7031265142976277,
            3.8800174651101598,
            3.2729116401673073,
            2.7257842095467217,
            3.313797730547668,
            1.9239796885364315,
            3.0274994089826013,
            1.5425135389513953,
            2.8725072846211557,
            2.6329036792325113,
            3.130659589938268,
            2.944893045574731,
            2.7229100146535288,
            2.7376835538299273,
            3.2175636072395704,
            1.6979317523815045,
            2.998887532907361,
            3.008056040849069,
            1.2963347529388227,
            2.7908222713960553,
            3.0690705314591367,
            3.7300341629628453,
            2.541629986104656,
            3.114570103678071,
            4.158086551066304,
            1.8182827437206006,
            3.011381659222532,
            3.2306466982876514,
            2.498443110544702,
            2.842078555957126,
            2.270242087536266,
            3.422873366482883,
            3.416242835461361,
            3.8920014799937643,
            1.9053179257415163,
            2.180777262027086,
            2.7616832343391655,
            1.379343442367367,
            2.1827285408934416,
            3.9731873914107276,
            2.298464700210172,
            2.9333313433995736,
            1.6567438204086906,
            4.125745001791246,
            3.600632095978239,
            2.4556868877600806,
            3.4633265790790437,
            2.101638893754219,
            2.5341572784997237,
            1.386916120767533,
            2.3721708502388434,
            3.1990494901746236,
            3.058628967877221,
            2.7817944090089908,
            2.684081085578037,
            2.85234693840727,
            3.1029545478800813,
            1.606180940645211,
            2.8799084702678486,
            2.8314699223428015,
            1.1884950818500961,
            2.540844999711927,
            3.1813269338057184,
            3.7607013594414203,
            2.41019991355921,
            3.0602033980107954,
            3.980694858575961,
            1.6450207042907241,
            2.95298981202641,
            1.842504235981348,
            1.804249741820788,
            2.0488719178714097,
            1.6848420261047794,
            1.792916752366624,
            2.0521283907619683,
            2.4770094528238586,
            1.156646331129215,
            1.5375037382968608,
            2.0365096466639434,
            1.318133311652028,
            1.802013753934102,
            2.5995510786217064,
            1.5751737135396506,
            2.363797698817799,
            1.2492210819015224,
            2.4218817819073695,
            2.12151110266242,
            2.0680301877666794,
            2.106831644890286,
            0.9559339574864507,
            1.844435519204767,
            0.9061787408380649,
            1.660103162119262,
            1.4490300865612116,
            1.7732698555600377,
            2.03675393356454,
            1.3220180237982115,
            1.6950666425709011,
            2.1736929382062775,
            1.219769177792884,
            2.0319242388726764,
            1.8803761177077791,
            0.9090598991656251,
            1.497297744080746,
            1.9142260343121484,
            2.7106386899849966,
            1.5968943422289157,
            2.0907800041701687,
            2.6492363155659238,
            1.261169546119305,
            1.9561293263543322,
            2.978837207030844,
            2.471844597103668,
            2.3482281593983414,
            1.9768215907687927,
            3.2146038783382207,
            3.1862879603273484,
            3.727216300191123,
            1.8539444368853963,
            2.2139934998648223,
            2.7590485361916612,
            1.4357325810797466,
            2.169219969468005,
            3.618647288010082,
            2.0819036908408086,
            2.603765394378731,
            1.6439952855823172,
            3.6019635936170955,
            3.5894685741584262,
            2.1264468343456917,
            3.103070894181512,
            2.0370771846192675,
            2.4549331417431257,
            1.362588216219556,
            2.1889153898692673,
            3.1358020294724547,
            3.389638362238273,
            2.6426151660286807,
            2.6697944486878735,
            2.8811953789430382,
            3.282517186273641,
            1.5818911246914853,
            2.920187461240362,
            2.9325378890018063,
            0.9507985489798749,
            2.521535496915845,
            3.1412665001345785,
            3.3443286366752263,
            2.1965556195058555,
            3.019328927937393,
            3.8375794842724242,
            1.4437028002498267,
            2.7167721028663974,
            2.7108545864911053,
            2.410864441286158,
            1.8661468261342062,
            1.9574285837623324,
            2.6039965083243075,
            2.543474294317745,
            2.893819986928272,
            0.8810686085916304,
            2.1839793002043555,
            2.7932075011058948,
            1.7830550782613979,
            2.1021019758814448,
            3.094339631302673,
            1.9179978107955096,
            2.2058968659936657,
            1.2913454397401976,
            3.0061296894166993,
            2.8806517564099416,
            1.8446795591752303,
            2.5181684942975884,
            1.3947808753254378,
            2.304921713448162,
            1.5722275515035251,
            2.337414478915748,
            2.230404867492404,
            3.1444327692367082,
            2.3904032769379286,
            2.353139000088965,
            2.3675974482168822,
            2.932519332054833,
            1.6344099434118617,
            2.9613112292750126,
            3.067425430531798,
            0.9515606013293746,
            2.26921301644252,
            2.580542851683734,
            2.6576237399302807,
            2.0088095934670624,
            2.3971251486103102,
            3.3024102761386365,
            1.1694479651163938,
            2.130749469451155,
            1.6583677589998826,
            1.3663355453460102,
            1.656841287020136,
            1.7257673401120412,
            1.6467556495545845,
            2.3400902099937535,
            2.443992887930518,
            1.1802075024739875,
            1.6342992047951337,
            1.4259019286917765,
            1.0587808848116993,
            1.0283301728942273,
            2.413365341871188,
            1.4872766581568135,
            1.9630597629346713,
            0.8940325485981762,
            2.294262452680489,
            2.0115111557248024,
            1.4783902332996472,
            2.2662857178303106,
            1.7315217833424263,
            1.3453247541562314,
            1.6442120834241978,
            1.7547468647366666,
            1.421871920946336,
            1.686616261968457,
            1.731736928709502,
            1.7962334576314674,
            2.295296363450752,
            1.9534095280475472,
            1.4156550916202364,
            1.6790087219847472,
            2.0519386429843904,
            0.9143144471361153,
            2.296295695600481,
            2.4013064362088876,
            2.374283967202499,
            1.923798419904752,
            1.5213340436532345,
            2.669698447492124,
            0.9396144075761075,
            2.257779205681735,
            2.602534889525573,
            2.5197053428022373,
            2.1734173340398377,
            2.683948857898603,
            2.9942513257810757,
            3.232377942298548,
            3.6111230886120995,
            1.2437989378012246,
            2.1194252070704738,
            2.6394179589369395,
            1.7804413007462627,
            1.9756369420657391,
            3.6176741846562255,
            2.227950266120063,
            2.656159053859583,
            1.60604432846975,
            3.501454578775942,
            2.912120187172344,
            2.453362689676469,
            3.114355374629146,
            1.7719053776264113,
            2.715712268883613,
            1.7908825609108283,
            2.776587966033625,
            2.3846639273512173,
            3.21226044190412,
            2.6978995627569664,
            3.019660268504998,
            2.7675945516698577,
            2.952935783620264,
            2.046322507199314,
            2.536112586826615,
            3.0989326750537254,
            1.5101073585483031,
            2.7849157489835736,
            3.1665521383471855,
            3.336626370052385,
            2.443214698795535,
            2.616153766324195,
            4.02867577648622,
            1.4862048267902277,
            2.910317079036889,
        ]
        .iter()
        .map(|e| Complex64::new(*e, 0.0))
        .collect();
        (d12, d23)
    }

    #[test]
    fn test_tensor_contraction() {
        let bond_dims = FxHashMap::from_iter([(0, 3), (1, 2), (2, 7), (3, 8), (4, 6), (5, 5)]);
        // t1 is of shape [3, 2, 7]
        let mut t1 = Tensor::new_from_map(vec![0, 1, 2], &bond_dims);

        // t2 is of shape [7, 8, 6]
        let mut t2 = Tensor::new_from_map(vec![2, 3, 4], &bond_dims);
        // t3 is of shape [3, 5, 8]
        let mut t3 = Tensor::new_from_map(vec![0, 5, 3], &bond_dims);
        // tout is of shape [8, 6, 3, 2]
        let mut t12 = Tensor::new_from_map(vec![3, 4, 0, 1], &bond_dims);
        // tout is of shape [3, 5, 7, 6]
        let mut t23 = Tensor::new_from_map(vec![0, 5, 2, 4], &bond_dims);

        let (d1, d2, d3, _) = setup();

        t1.set_tensor_data(TensorData::new_from_data(
            &t1.shape().unwrap(),
            d1,
            Some(Layout::RowMajor),
        ));

        t2.set_tensor_data(TensorData::new_from_data(
            &t2.shape().unwrap(),
            d2,
            Some(Layout::RowMajor),
        ));
        t3.set_tensor_data(TensorData::new_from_data(
            &t3.shape().unwrap(),
            d3,
            Some(Layout::RowMajor),
        ));

        let (ref12, ref23) = intermediate_data();
        t12.set_tensor_data(TensorData::new_from_data(
            &t12.shape().unwrap(),
            ref12,
            Some(Layout::RowMajor),
        ));

        t23.set_tensor_data(TensorData::new_from_data(
            &t23.shape().unwrap(),
            ref23,
            Some(Layout::RowMajor),
        ));

        let mut tn_12 = Tensor::new_composite(vec![t1.clone(), t2.clone(), t3.clone()]);

        tn_12.contract_tensors(0, 1);
        assert_approx_eq!(&Tensor, tn_12.tensor(0), &t12);

        let mut tn_23 = Tensor::new_composite(vec![t1, t2, t3]);

        tn_23.contract_tensors(1, 2);
        assert_approx_eq!(&Tensor, tn_23.tensor(1), &t23);
    }

    #[test]
    fn test_tn_contraction() {
        let bond_dims = FxHashMap::from_iter([(0, 3), (1, 2), (2, 7), (3, 8), (4, 6), (5, 5)]);
        // t1 is of shape [3, 2, 7]
        let mut t1 = Tensor::new_from_map(vec![0, 1, 2], &bond_dims);

        // t2 is of shape [7, 8, 6]
        let mut t2 = Tensor::new_from_map(vec![2, 3, 4], &bond_dims);
        // t3 is of shape [3, 5, 8]
        let mut t3 = Tensor::new_from_map(vec![0, 5, 3], &bond_dims);
        // tout is of shape [5, 6, 2]
        let mut tout = Tensor::new_from_map(vec![5, 4, 1], &bond_dims);

        let (d1, d2, d3, dout) = setup();

        t1.set_tensor_data(TensorData::new_from_data(
            &t1.shape().unwrap(),
            d1,
            Some(Layout::RowMajor),
        ));

        t2.set_tensor_data(TensorData::new_from_data(
            &t2.shape().unwrap(),
            d2,
            Some(Layout::RowMajor),
        ));
        t3.set_tensor_data(TensorData::new_from_data(
            &t3.shape().unwrap(),
            d3,
            Some(Layout::RowMajor),
        ));
        tout.set_tensor_data(TensorData::new_from_data(
            &tout.shape().unwrap(),
            dout,
            Some(Layout::RowMajor),
        ));

        let tn = Tensor::new_composite(vec![t1, t2, t3]);
        let contract_path = path![(0, 1), (0, 2)];

        let result = contract_tensor_network(tn, contract_path);
        assert_approx_eq!(&Tensor, &result, &tout);
    }

    #[test]
    fn test_outer_product_contraction() {
        let bond_dims = FxHashMap::from_iter([(0, 3), (1, 2)]);
        let mut t1 = Tensor::new_from_map(vec![0], &bond_dims);
        let mut t2 = Tensor::new_from_map(vec![1], &bond_dims);
        t1.set_tensor_data(TensorData::new_from_data(
            &[3],
            vec![
                Complex64::new(1.0, 0.0),
                Complex64::new(2.0, 5.0),
                Complex64::new(3.0, -1.0),
            ],
            None,
        ));
        t2.set_tensor_data(TensorData::new_from_data(
            &[2],
            vec![Complex64::new(-4.0, 2.0), Complex64::new(0.0, -1.0)],
            None,
        ));
        let t3 = Tensor::new_composite(vec![t1, t2]);
        let contract_path = path![(0, 1)];

        let mut tn_ref = Tensor::new_from_map(vec![1, 0], &bond_dims);
        tn_ref.set_tensor_data(TensorData::new_from_data(
            &[2, 3],
            vec![
                Complex64::new(-4.0, 2.0),
                Complex64::new(0.0, -1.0),
                Complex64::new(-18.0, -16.0),
                Complex64::new(5.0, -2.0),
                Complex64::new(-10.0, 10.0),
                Complex64::new(-1.0, -3.0),
            ],
            None,
        ));

        let result = contract_tensor_network(t3, contract_path);
        assert_approx_eq!(&Tensor, &result, &tn_ref);
    }
}
